# uncrustify config file based from
# Barr Group Embedded C Coding Standard

indent_columns                        = 4
indent_switch_case                    = indent_columns
cmt_indent_multi                      = false
indent_with_tabs                      = 0           # 0 -  space, 2 - TAB
indent_class                          = true
indent_member                         = 8

newlines                              = LF          # AUTO (default), CRLF, CR, or LF
code_width                            = 120
ls_code_width                         = false

mod_paren_on_return                   = remove      # "return 1;" vs "return (1);"
mod_full_brace_if                     = force
mod_full_brace_for                    = force
mod_full_brace_while                  = force
mod_full_brace_do                     = force

sp_sizeof_paren                       = force       # "sizeof (int)" vs "sizeof(int)"
sp_inside_paren_cast                  = remove
sp_before_sparen                      = force       # "if (" vs "if("
sp_assign                             = force       # "=" vs " = "
sp_arith                              = force       # "+" vs " + "
sp_compare                            = force       # "==" vs " == "
sp_after_ptr_star                     = force       # "int *ptr" vs "int * ptr" -- under consideration
sp_before_ptr_star                    = force       # "int* ptr" vs "int * ptr" -- under consideration
sp_cond_colon                         = force       # "a ? b:a" vs "a ? b : a"
sp_cond_question                      = force       # "a?b : a" vs "a ? b:a"
sp_before_byref                       = force       # "int& ref" vs "int & ref"
sp_after_byref                        = force       # "int &ref" vs "int & ref"
sp_inside_square                      = remove      # "int arr[ 3 ]" vs "int arr[3]"
sp_before_square                      = remove      # 'int arr [3]" vs "int arr[3]"
sp_inside_sparen                      = remove      # "if ( TRUE )" vs "if (TRUE)"
sp_inside_fparen                      = remove      # "void foo( void ) {" vs "void foo(void) {"
sp_func_proto_paren                   = remove      # "void foo( int );"vs "void foo(int);"
sp_func_def_paren                     = remove      # "int foo () {" vs "int foo() {"
sp_after_comma                        = force       # "int x,y" vs "int x, y"
sp_bool                               = force       # "x||y" vs "x || y"
sp_between_ptr_star                   = remove      # Change "* *" to "**"
pp_space                              = ignore
pp_space_count                        = 4
pp_ignore_define_body                 = true
pp_indent                             = remove

nl_before_if                         = ignore
nl_before_for                        = ignore
nl_before_while                      = ignore
nl_before_do                         = ignore
nl_before_switch                     = ignore
nl_fcall_brace  = force
nl_after_if                          = force
nl_after_for                         = force
nl_after_while                       = force
nl_after_do                          = force
nl_after_switch                      = force
nl_before_case                       = true
nl_case_colon_brace                  = force
nl_after_case                        = true
nl_func_proto_type_name              = remove
nl_func_type_name                    = remove
nl_if_brace                          = add
nl_else_brace                        = add
nl_for_brace                         = add
nl_while_brace                       = add
nl_do_brace                          = add
nl_switch_brace                      = add
nl_after_semicolon                   = true
nl_enum_colon_type                   = add
nl_struct_brace                      = add
nl_union_brace                       = add
nl_after_return                      = false
nl_end_of_file                       = force
nl_end_of_file_min                   = 1
nl_max                               = 3
nl_after_func_body                   = 2
nl_func_leave_one_liners             = true
nl_fdef_brace                        = force

string_replace_tab_chars             = true         # replace TAB with \t
